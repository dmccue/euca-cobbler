# Registration steps are not expected to work for multiple components (e.g. multi-cluster or HA), yet.

- name: Check for Walrus
  shell: /usr/sbin/euca_conf --list-walrusbackends | grep -q {{ primary_walrus }}
  register: walrus_return
  ignore_errors: true

- name: Register Walrus
  shell: /usr/sbin/euca_conf --no-scp --no-rsync --no-sync --register-walrusbackend --partition walrus --host {{ hostvars[item]['ansible_{{ vnet_pri }}']['ipv4']['address'] }} --component walrus-{{ hostvars[item]['ansible_hostname'] }} 
  with_items: groups.walrus
  when: walrus_return.rc|int == 1

- name: Check for SC
  shell: /usr/sbin/euca_conf --list-scs | grep -q {{ primary_sc }}
  register: sc_return
  ignore_errors: true

- name: Register SC
  shell: /usr/sbin/euca_conf --no-scp --no-rsync --no-sync --register-sc --partition {{ partition_name }} --host {{ hostvars[item]['ansible_{{ vnet_pri }}']['ipv4']['address'] }} --component sc-{{ hostvars[item]['ansible_hostname'] }}
  with_items: groups.sc
  when: sc_return.rc|int == 1

- name: Check for CC
  shell: /usr/sbin/euca_conf --list-clusters | grep -q {{ primary_cc }}
  register: cc_return
  ignore_errors: true

- name: Register CC
  shell: /usr/sbin/euca_conf --no-scp --no-rsync --no-sync --register-cluster --partition {{ partition_name }} --host ${hostvars.{$item}.ansible_$vnet_pub.ipv4.address} --component cc-${hostvars.{$item}.ansible_hostname}
  with_items: groups.cc
  when: cc_return.rc|int == 1

- name: Pull cluster (node and cc) keys
  fetch: src=/var/lib/eucalyptus/keys/{{ partition_name }}/{{ item }} dest=/tmp/ flat=yes
  with_items:
  - cluster-cert.pem
  - cluster-pk.pem
  - node-cert.pem
  - node-pk.pem

- name: Wait for Java system components
  wait_for: host={{ item }} port=8773 state=started
  with_items:
  - groups.clc
  - groups.walrus
  - groups.sc

- name: Install ELB utils
  yum: name=eucalyptus-load-balancer-image state=installed
  register: result

- name: Get Administrator Credentials
  shell: euca-get-credentials -e / -a eucalyptus -u admin /root/admin.zip creates=/root/admin.zip
  tags:
  - creds

- name: Unpack admin credentials
  shell: /usr/bin/unzip -qou /root/admin.zip -d /root/admin-creds creates=/root/admin-creds/eucarc
  tags:
  - creds

- name: Template bashrc for root
  template: src=bashrc.j2 dest=/root/.bashrc owner=root group=root

- name: Install default ELB image
  shell: source /root/admin-creds/eucarc && euca-install-load-balancer --install-default
  when: result.changed

- name: Set block storage manager
  shell: source /root/admin-creds/eucarc && euca-modify-property -p {{ partition_name }}.storage.blockstoragemanager={{ storbackend }}

- name: Set DAS device
  shell: source /root/admin-creds/eucarc && euca-modify-property -p {{ partition_name }}.storage.dasdevice={{ das_device }}
  when: storbackend == "das"

- name: Cleanup credentials
  file: state=absent path={{ item }}
  with_items:
  - /root/admin-creds
  - /root/admin.zip

- name: Pause to settle and let ELB service ENABLE
  pause: minutes=2

- name: Get Administrator Credentials
  shell: euca-get-credentials -e / -a eucalyptus -u admin /root/admin.zip creates=/root/admin.zip
  tags:
  - creds

- name: Unpack admin credentials
  shell: /usr/bin/unzip -qou /root/admin.zip -d /root/admin-creds creates=/root/admin-creds/eucarc
  tags:
  - creds
